<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="root_modDescription" xml:space="preserve">
    <value>Vielfache Fahrzeug-Skin-Optionen</value>
  </data>
  <data name="VS_MODELSELECT" xml:space="preserve">
    <value>Modell auswählen</value>
  </data>
  <data name="VS_THEREARENOSKINS" xml:space="preserve">
    <value>Für dieses Fahrzeugmodell sind keine Skins geladen</value>
  </data>
  <data name="VS_CREATENEWSKIN" xml:space="preserve">
    <value>Neuen Skin erstellen</value>
  </data>
  <data name="VS_CREATESKIN_MESSAGE" xml:space="preserve">
    <value>Neuen Skin-Namen eingeben:</value>
  </data>
  <data name="VS_CREATESKIN_ERROR_ALREADYEXISTS" xml:space="preserve">
    <value>&lt;color=yellow&gt;Es gibt bereits einen Skin mit diesem Namen!&lt;/color&gt;</value>
  </data>
  <data name="VS_RELOADALLSKINS" xml:space="preserve">
    <value>Alle Skins neu laden</value>
  </data>
  <data name="VS_RELOADASSETSKINS" xml:space="preserve">
    <value>Alle Skins aus aktuellem Fahrzeug neu laden</value>
  </data>
  <data name="VS_ACTIVERULESONLY" xml:space="preserve">
    <value>Filtere Fahrzeuge mit mindestens einem Skin</value>
  </data>
  <data name="VS_EXPORTTOASSET_TITLE" xml:space="preserve">
    <value>Skins zum Teilen und Hochladen in den Workshop exportieren</value>
  </data>
  <data name="VS_EXPORTTOASSET_MSG" xml:space="preserve">
    <value>Möchtest du alle Skins löschen, die bereits in den Workshop exportiert wurden?
Beachte, dass Skins mit gleichem Namen trotzdem überschrieben werden   </value>
  </data>
  <data name="VS_EXPORTASSET" xml:space="preserve">
    <value>Export im Workshop geteilt</value>
  </data>
  <data name="VS_EXPORTTOASSET_MSGSUC" xml:space="preserve">
    <value>Dateien zum Hochladen erfolgreich exportiert!</value>
  </data>
  <data name="VS_VIEWFILES" xml:space="preserve">
    <value>Datei-Ordner öffnen</value>
  </data>
  <data name="VS_SOURCECOLOR_LEGEND" xml:space="preserve">
    <value>Skin-Quell-Legende: &lt;color=gray&gt;Original Skin&lt;/color&gt; &lt;color=green&gt;Workshop/Staging&lt;/color&gt; &lt;color=yellow&gt;Geteilter Ordner&lt;/color&gt;</value>
  </data>
  <data name="VS_CREATESKIN_MSGSUC" xml:space="preserve">
    <value>Skin-Dateien erstellt!
Dateien befinden sich im Ordner, bearbeite sie und lade sie im Spiel neu, um die Änderungen zu sehen   </value>
  </data>
  <data name="VS_USINGSAVEGAMECONFIG" xml:space="preserve">
    <value>Speicherstand-Konfiguration verwenden</value>
  </data>
  <data name="VS_USINGSHAREDCONFIG" xml:space="preserve">
    <value>Global-Konfiguration verwenden</value>
  </data>
  <data name="VS_EXPORTASSHARED" xml:space="preserve">
    <value>Aktuelles zum Freigeben exportieren</value>
  </data>
  <data name="VS_DISCARDSAVEGAME" xml:space="preserve">
    <value>Verwerfen und globale verwenden</value>
  </data>
  <data name="VS_DEFAULTSNOTSAVED" xml:space="preserve">
    <value>&lt;color=red&gt;Die Auswahl der Skins, die standardmäßig aktiviert sind, ist nicht gespeichert!&lt;/color&gt;</value>
  </data>
  <data name="VS_DEFAULTSSAVED" xml:space="preserve">
    <value>Die Auswahl der Skins, die standardmäßig aktiviert sind, stimmt mit der Datei überein</value>
  </data>
  <data name="VS_SAVESKINENABLESELECTION" xml:space="preserve">
    <value>Skins speichern ist standardmäßig aktiviert</value>
  </data>
  <data name="VS_DISCARDCHANGES" xml:space="preserve">
    <value>Änderungen verwerfen</value>
  </data>
  <data name="vs_forceSkinInCurrentSelectedVehicle" xml:space="preserve">
    <value>Skin im aktuell ausgewählten Fahrzeug erzwingen</value>
  </data>
</root>